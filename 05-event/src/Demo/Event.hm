-----------------------------------------------------------------------------
-- |
-- Module      :  Demo.Event
-- Copyright   :  (c) 2020 EMQ Technologies Co., Ltd.
-- License     :  BSD-style (see the LICENSE file)
--
-- Maintainer  :  Feng Lee, feng@emqx.io
--                Yang M, yangm@emqx.io
-- Stability   :  experimental
-- Portability :  portable
--
-- The GenEvent Demo.
--
-----------------------------------------------------------------------------
module Demo.Event (start, main) where

import Prelude
import Control.Behaviour.GenEvent
  ( class GenEvent
  , Init
  , initOk
  , HandleEvent
  , notifyTo
  , startLinkWith
  )

data Event = EventA | EventB
data State = State [Event]

instance GenEvent Event State where
  handleEvent = handleEvent

name :: Atom
name = :event

start :: Process Pid
start = startLinkWith name init

init :: Init State
init = initOk (State [])

handleEvent :: HandleEvent Event State
handleEvent e (State events) = do
  println "Event"
  pure $ State [e|events]

main :: IO ()
main = do
  pid <- start
  notifyTo pid EventA
  notifyTo pid EventB
  notifyTo pid EventA
  notifyTo pid EventB
